#!/usr/bin/env node

'use strict';

var config = require('../config/env/' + (process.env.NODE_ENV || 'development') + '.js');
var Scrapes = require('../app/controllers/scrapes.server.controller');
var Parse = require('../app/controllers/jobparse.server.controller');
var GithubService = require('../app/services/githubjobs.server.service');
require('../app/models/gitjob.server.model');

var mongoose = require('mongoose'),
  GitJob = mongoose.model('GitJob');

mongoose.connect(config.db);
mongoose.connection.on('error', console.error.bind(console, 'connection error:'));

var quit = function(err) {
  var code = 0;
  if (err) {
    console.log(err);
    code = 1;
  }
  process.exit(code);
};

var postProcess = function(numJobs) {
  Scrapes.find({}).sort('-created').exec(function(err, scrapes) {

  });
};

var scrape = function () {
  GithubService.getGithubJobsPage(function (error, html) {
    if (error) {
      quit(error);
    }

    if (!error) {
      var numJobs = Parse.jobCount(html);
      var c = 0;
      Scrapes.create('https://github.com/about/jobs', numJobs);
      Parse.getJobUrls(html, function(jobUrl) {
        GithubService.get(jobUrl, function (error, html) {
          GitJob.findOne({ url: jobUrl }, function(err, job) {
              if (err) {
                console.log (err);
                quit();
              } else {
                if (!job) {
                  new GitJob(Parse.job(jobUrl, html)).save(function(err) {
                    if (err) {
                      quit(err);
                    }
                    c++;
                    if (c == numJobs) {
                      quit();
                    }
                  });
                } else {
                  console.log('there is already a job');
                  GitJob.update({ url: jobUrl}, { lastSeen: Date.now() }, function (err) {
                    if (err) {
                      quit(err);
                    }
                    c++;
                    if (c == numJobs) {
                      quit();
                    }
                  });
                }
              }
          });
        });
      });
    }
  });
};

mongoose.connection.once('open', scrape);
